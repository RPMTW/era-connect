// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.7.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'authentication/account.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<Vec<crate::api::backend_exclusive::storage::storage_loader::StorageLoader>>>
@sealed
class StorageLoader extends RustOpaque {
  StorageLoader.dcoDecode(dynamic wire) : super.dcoDecode(wire, _kStaticData);

  StorageLoader.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_StorageLoader,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_StorageLoader,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_StorageLoaderPtr,
  );
}

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<(crate::api::backend_exclusive::storage::storage_loader::StorageLoader,PathBuf,)>>
@sealed
class StorageLoaderPathBuf extends RustOpaque {
  StorageLoaderPathBuf.dcoDecode(dynamic wire)
      : super.dcoDecode(wire, _kStaticData);

  StorageLoaderPathBuf.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_StorageLoaderPathBuf,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_StorageLoaderPathBuf,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_StorageLoaderPathBufPtr,
  );
}

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<crate::api::shared_resources::collection::Collection>>
@sealed
class Collection extends RustOpaque {
  Collection.dcoDecode(dynamic wire) : super.dcoDecode(wire, _kStaticData);

  Collection.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Collection,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Collection,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CollectionPtr,
  );
}

class AdvancedOptions {
  final int? jvmMaxMemory;

  const AdvancedOptions({
    this.jvmMaxMemory,
  });

  @override
  int get hashCode => jvmMaxMemory.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is AdvancedOptions &&
          runtimeType == other.runtimeType &&
          jvmMaxMemory == other.jvmMaxMemory;
}

class CollectionId {
  final String field0;

  const CollectionId({
    required this.field0,
  });

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CollectionId &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class ModLoader {
  final ModLoaderType modLoaderType;
  final String version;

  const ModLoader({
    required this.modLoaderType,
    required this.version,
  });

  @override
  int get hashCode => modLoaderType.hashCode ^ version.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ModLoader &&
          runtimeType == other.runtimeType &&
          modLoaderType == other.modLoaderType &&
          version == other.version;
}

enum ModLoaderType {
  forge,
  neoForge,
  fabric,
  quilt,
}
