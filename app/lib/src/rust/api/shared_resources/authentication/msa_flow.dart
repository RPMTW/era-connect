// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.14.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import 'account.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:uuid/uuid.dart';
part 'msa_flow.freezed.dart';

class LoginFlowDeviceCode {
  final String verificationUri;
  final String userCode;

  const LoginFlowDeviceCode({
    required this.verificationUri,
    required this.userCode,
  });

  @override
  int get hashCode => verificationUri.hashCode ^ userCode.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LoginFlowDeviceCode &&
          runtimeType == other.runtimeType &&
          verificationUri == other.verificationUri &&
          userCode == other.userCode;
}

@freezed
sealed class LoginFlowErrors with _$LoginFlowErrors {
  const factory LoginFlowErrors.xstsError(
    XstsTokenErrorType field0,
  ) = LoginFlowErrors_XstsError;
  const factory LoginFlowErrors.gameNotOwned() = LoginFlowErrors_GameNotOwned;
  const factory LoginFlowErrors.unknownError(
    String field0,
  ) = LoginFlowErrors_UnknownError;
}

@freezed
sealed class LoginFlowEvent with _$LoginFlowEvent {
  const factory LoginFlowEvent.stage(
    LoginFlowStage field0,
  ) = LoginFlowEvent_Stage;
  const factory LoginFlowEvent.deviceCode(
    LoginFlowDeviceCode field0,
  ) = LoginFlowEvent_DeviceCode;
  const factory LoginFlowEvent.error(
    LoginFlowErrors field0,
  ) = LoginFlowEvent_Error;
  const factory LoginFlowEvent.success(
    MinecraftAccount field0,
  ) = LoginFlowEvent_Success;
}

enum LoginFlowStage {
  fetchingDeviceCode,
  waitingForUser,
  authenticatingXboxLive,
  fetchingXstsToken,
  fetchingMinecraftToken,
  gettingProfile,
}

/// Reference: [Unofficial Mojang Wiki](https://wiki.vg/Microsoft_Authentication_Scheme)
enum XstsTokenErrorType {
  /// The account doesn't have an Xbox account. Once they sign up for one (or login through minecraft.net to create one) then they can proceed with the login. This shouldn't happen with accounts that have purchased Minecraft with a Microsoft account, as they would've already gone through that Xbox signup process.
  doesNotHaveXboxAccount,

  /// The account is from a country where Xbox Live is not available/banned.
  countryNotAvailable,

  /// The account needs adult verification on Xbox page. (South Korea)
  needsAdultVerificationKr1,

  /// The account needs adult verification on Xbox page. (South Korea)
  needsAdultVerificationKr2,

  /// The account is a child (under 18) and cannot proceed unless the account is added to a Family by an adult. This only seems to occur when using a custom Microsoft Azure application. When using the Minecraft launchers client id, this doesn't trigger.
  childAccount,
}
