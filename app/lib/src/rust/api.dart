// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.2.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'api/authentication/account.dart';
import 'api/authentication/msa_flow.dart';
import 'api/collection.dart';
import 'api/download.dart';
import 'api/storage/account_storage.dart';
import 'api/storage/ui_layout.dart';
import 'api/vanilla/version.dart';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

Future<void> setupLogger({dynamic hint}) =>
    RustLib.instance.api.setupLogger(hint: hint);

UILayoutValue getUiLayoutStorage({required UILayoutKey key, dynamic hint}) =>
    RustLib.instance.api.getUiLayoutStorage(key: key, hint: hint);

Future<void> setUiLayoutStorage({required UILayoutValue value, dynamic hint}) =>
    RustLib.instance.api.setUiLayoutStorage(value: value, hint: hint);

AccountStorageValue getAccountStorage(
        {required AccountStorageKey key, dynamic hint}) =>
    RustLib.instance.api.getAccountStorage(key: key, hint: hint);

String getSkinFilePath({required MinecraftSkin skin, dynamic hint}) =>
    RustLib.instance.api.getSkinFilePath(skin: skin, hint: hint);

Future<void> removeMinecraftAccount({required UuidValue uuid, dynamic hint}) =>
    RustLib.instance.api.removeMinecraftAccount(uuid: uuid, hint: hint);

Stream<LoginFlowEvent> minecraftLoginFlow({dynamic hint}) =>
    RustLib.instance.api.minecraftLoginFlow(hint: hint);

Future<void> getV({dynamic hint}) => RustLib.instance.api.getV(hint: hint);

Future<void> createCollection(
        {required String displayName,
        required VersionMetadata versionMetadata,
        ModLoader? modLoader,
        AdvancedOptions? advancedOptions,
        dynamic hint}) =>
    RustLib.instance.api.createCollection(
        displayName: displayName,
        versionMetadata: versionMetadata,
        modLoader: modLoader,
        advancedOptions: advancedOptions,
        hint: hint);

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<crate::api::DownloadProgress>>
@sealed
class DownloadProgress extends RustOpaque {
  DownloadProgress.dcoDecode(dynamic wire)
      : super.dcoDecode(wire, _kStaticData);

  DownloadProgress.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_DownloadProgress,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_DownloadProgress,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_DownloadProgressPtr,
  );
}
