// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.11.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/backend_exclusive/storage/account_storage.dart';
import 'api/backend_exclusive/storage/ui_layout.dart';
import 'api/backend_exclusive/vanilla/version.dart';
import 'api/shared_resources/authentication/account.dart';
import 'api/shared_resources/authentication/msa_flow.dart';
import 'api/shared_resources/collection.dart';
import 'api/shared_resources/entry.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.setupLogger();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<PathBuf> minecraftSkinGetHeadFilePath(
      {required MinecraftSkin that, dynamic hint});

  Future<StorageLoaderPathBuf> collectionCreate(
      {required String displayName, dynamic hint});

  Future<PathBuf> collectionGetBasePath({dynamic hint});

  Future<CollectionId> collectionGetCollectionId(
      {required Collection that, dynamic hint});

  Future<VecStorageLoader> collectionScan({dynamic hint});

  Future<void> createCollection(
      {required String displayName,
      required VersionMetadata versionMetadata,
      ModLoader? modLoader,
      AdvancedOptions? advancedOptions,
      dynamic hint});

  AccountStorageValue getAccountStorage(
      {required AccountStorageKey key, dynamic hint});

  String getSkinFilePath({required MinecraftSkin skin, dynamic hint});

  UILayoutValue getUiLayoutStorage({required UILayoutKey key, dynamic hint});

  Future<List<VersionMetadata>> getVanillaVersions({dynamic hint});

  Stream<LoginFlowEvent> minecraftLoginFlow({dynamic hint});

  Future<void> removeMinecraftAccount({required UuidValue uuid, dynamic hint});

  Future<void> setUiLayoutStorage({required UILayoutValue value, dynamic hint});

  Future<void> setupLogger({dynamic hint});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PathBuf;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PathBuf;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PathBufPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VecStorageLoader;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VecStorageLoader;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VecStorageLoaderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StorageLoaderPathBuf;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StorageLoaderPathBuf;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StorageLoaderPathBufPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Collection;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Collection;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CollectionPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<PathBuf> minecraftSkinGetHeadFilePath(
      {required MinecraftSkin that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_minecraft_skin(that);
        return wire.wire_MinecraftSkin_get_head_file_path(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockPathBuf,
        decodeErrorData: null,
      ),
      constMeta: kMinecraftSkinGetHeadFilePathConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMinecraftSkinGetHeadFilePathConstMeta =>
      const TaskConstMeta(
        debugName: "MinecraftSkin_get_head_file_path",
        argNames: ["that"],
      );

  @override
  Future<StorageLoaderPathBuf> collectionCreate(
      {required String displayName, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(displayName);
        return wire.wire_Collection_create(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockcrateapibackend_exclusivestoragestorage_loaderStorageLoaderPathBuf,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCollectionCreateConstMeta,
      argValues: [displayName],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCollectionCreateConstMeta => const TaskConstMeta(
        debugName: "Collection_create",
        argNames: ["displayName"],
      );

  @override
  Future<PathBuf> collectionGetBasePath({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_Collection_get_base_path(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockPathBuf,
        decodeErrorData: null,
      ),
      constMeta: kCollectionGetBasePathConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCollectionGetBasePathConstMeta => const TaskConstMeta(
        debugName: "Collection_get_base_path",
        argNames: [],
      );

  @override
  Future<CollectionId> collectionGetCollectionId(
      {required Collection that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockcrateapishared_resourcescollectionCollection(
                that);
        return wire.wire_Collection_get_collection_id(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_collection_id,
        decodeErrorData: null,
      ),
      constMeta: kCollectionGetCollectionIdConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCollectionGetCollectionIdConstMeta => const TaskConstMeta(
        debugName: "Collection_get_collection_id",
        argNames: ["that"],
      );

  @override
  Future<VecStorageLoader> collectionScan({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_Collection_scan(port_);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockVeccrateapibackend_exclusivestoragestorage_loaderStorageLoader,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCollectionScanConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCollectionScanConstMeta => const TaskConstMeta(
        debugName: "Collection_scan",
        argNames: [],
      );

  @override
  Future<void> createCollection(
      {required String displayName,
      required VersionMetadata versionMetadata,
      ModLoader? modLoader,
      AdvancedOptions? advancedOptions,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(displayName);
        var arg1 = cst_encode_box_autoadd_version_metadata(versionMetadata);
        var arg2 = cst_encode_opt_box_autoadd_mod_loader(modLoader);
        var arg3 = cst_encode_opt_box_autoadd_advanced_options(advancedOptions);
        return wire.wire_create_collection(port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCreateCollectionConstMeta,
      argValues: [displayName, versionMetadata, modLoader, advancedOptions],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateCollectionConstMeta => const TaskConstMeta(
        debugName: "create_collection",
        argNames: [
          "displayName",
          "versionMetadata",
          "modLoader",
          "advancedOptions"
        ],
      );

  @override
  AccountStorageValue getAccountStorage(
      {required AccountStorageKey key, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_account_storage_key(key);
        return wire.wire_get_account_storage(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_account_storage_value,
        decodeErrorData: null,
      ),
      constMeta: kGetAccountStorageConstMeta,
      argValues: [key],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAccountStorageConstMeta => const TaskConstMeta(
        debugName: "get_account_storage",
        argNames: ["key"],
      );

  @override
  String getSkinFilePath({required MinecraftSkin skin, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_minecraft_skin(skin);
        return wire.wire_get_skin_file_path(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kGetSkinFilePathConstMeta,
      argValues: [skin],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSkinFilePathConstMeta => const TaskConstMeta(
        debugName: "get_skin_file_path",
        argNames: ["skin"],
      );

  @override
  UILayoutValue getUiLayoutStorage({required UILayoutKey key, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_ui_layout_key(key);
        return wire.wire_get_ui_layout_storage(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ui_layout_value,
        decodeErrorData: null,
      ),
      constMeta: kGetUiLayoutStorageConstMeta,
      argValues: [key],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetUiLayoutStorageConstMeta => const TaskConstMeta(
        debugName: "get_ui_layout_storage",
        argNames: ["key"],
      );

  @override
  Future<List<VersionMetadata>> getVanillaVersions({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_get_vanilla_versions(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_version_metadata,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kGetVanillaVersionsConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetVanillaVersionsConstMeta => const TaskConstMeta(
        debugName: "get_vanilla_versions",
        argNames: [],
      );

  @override
  Stream<LoginFlowEvent> minecraftLoginFlow({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_minecraft_login_flow(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_login_flow_event,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kMinecraftLoginFlowConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMinecraftLoginFlowConstMeta => const TaskConstMeta(
        debugName: "minecraft_login_flow",
        argNames: [],
      );

  @override
  Future<void> removeMinecraftAccount({required UuidValue uuid, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_Uuid(uuid);
        return wire.wire_remove_minecraft_account(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kRemoveMinecraftAccountConstMeta,
      argValues: [uuid],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRemoveMinecraftAccountConstMeta => const TaskConstMeta(
        debugName: "remove_minecraft_account",
        argNames: ["uuid"],
      );

  @override
  Future<void> setUiLayoutStorage(
      {required UILayoutValue value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ui_layout_value(value);
        return wire.wire_set_ui_layout_storage(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSetUiLayoutStorageConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetUiLayoutStorageConstMeta => const TaskConstMeta(
        debugName: "set_ui_layout_storage",
        argNames: ["value"],
      );

  @override
  Future<void> setupLogger({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_setup_logger(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSetupLoggerConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetupLoggerConstMeta => const TaskConstMeta(
        debugName: "setup_logger",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PathBuf =>
          wire.rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockPathBuf;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PathBuf =>
          wire.rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockPathBuf;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VecStorageLoader => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockVeccrateapibackend_exclusivestoragestorage_loaderStorageLoader;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VecStorageLoader => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockVeccrateapibackend_exclusivestoragestorage_loaderStorageLoader;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StorageLoaderPathBuf => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcrateapibackend_exclusivestoragestorage_loaderStorageLoaderPathBuf;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StorageLoaderPathBuf => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcrateapibackend_exclusivestoragestorage_loaderStorageLoaderPathBuf;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Collection => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockcrateapishared_resourcescollectionCollection;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Collection => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockcrateapishared_resourcescollectionCollection;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    return AnyhowException(raw as String);
  }

  @protected
  PathBuf dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockPathBuf(dynamic raw) {
    return PathBuf.dcoDecode(raw as List<dynamic>);
  }

  @protected
  VecStorageLoader
      dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockVeccrateapibackend_exclusivestoragestorage_loaderStorageLoader(
          dynamic raw) {
    return VecStorageLoader.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StorageLoaderPathBuf
      dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockcrateapibackend_exclusivestoragestorage_loaderStorageLoaderPathBuf(
          dynamic raw) {
    return StorageLoaderPathBuf.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Collection
      dco_decode_Auto_Ref_RustOpaque_stdsyncRwLockcrateapishared_resourcescollectionCollection(
          dynamic raw) {
    return Collection.dcoDecode(raw as List<dynamic>);
  }

  @protected
  DateTime dco_decode_Chrono_Utc(dynamic raw) {
    return dcoDecodeTimestamp(ts: dco_decode_i_64(raw).toInt(), isUtc: true);
  }

  @protected
  PathBuf dco_decode_RustOpaque_stdsyncRwLockPathBuf(dynamic raw) {
    return PathBuf.dcoDecode(raw as List<dynamic>);
  }

  @protected
  VecStorageLoader
      dco_decode_RustOpaque_stdsyncRwLockVeccrateapibackend_exclusivestoragestorage_loaderStorageLoader(
          dynamic raw) {
    return VecStorageLoader.dcoDecode(raw as List<dynamic>);
  }

  @protected
  StorageLoaderPathBuf
      dco_decode_RustOpaque_stdsyncRwLockcrateapibackend_exclusivestoragestorage_loaderStorageLoaderPathBuf(
          dynamic raw) {
    return StorageLoaderPathBuf.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Collection
      dco_decode_RustOpaque_stdsyncRwLockcrateapishared_resourcescollectionCollection(
          dynamic raw) {
    return Collection.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    return UuidValue.fromByteList(dco_decode_list_prim_u_8(raw));
  }

  @protected
  AccountStorageKey dco_decode_account_storage_key(dynamic raw) {
    return AccountStorageKey.values[raw as int];
  }

  @protected
  AccountStorageValue dco_decode_account_storage_value(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return AccountStorageValue_Accounts(
          dco_decode_list_minecraft_account(raw[1]),
        );
      case 1:
        return AccountStorageValue_MainAccount(
          dco_decode_opt_Uuid(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AccountToken dco_decode_account_token(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AccountToken(
      token: dco_decode_String(arr[0]),
      expiresAt: dco_decode_i_64(arr[1]),
    );
  }

  @protected
  AdvancedOptions dco_decode_advanced_options(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AdvancedOptions(
      jvmMaxMemory: dco_decode_opt_box_autoadd_usize(arr[0]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    return raw as bool;
  }

  @protected
  AdvancedOptions dco_decode_box_autoadd_advanced_options(dynamic raw) {
    return dco_decode_advanced_options(raw);
  }

  @protected
  LoginFlowDeviceCode dco_decode_box_autoadd_login_flow_device_code(
      dynamic raw) {
    return dco_decode_login_flow_device_code(raw);
  }

  @protected
  LoginFlowErrors dco_decode_box_autoadd_login_flow_errors(dynamic raw) {
    return dco_decode_login_flow_errors(raw);
  }

  @protected
  MinecraftAccount dco_decode_box_autoadd_minecraft_account(dynamic raw) {
    return dco_decode_minecraft_account(raw);
  }

  @protected
  MinecraftSkin dco_decode_box_autoadd_minecraft_skin(dynamic raw) {
    return dco_decode_minecraft_skin(raw);
  }

  @protected
  ModLoader dco_decode_box_autoadd_mod_loader(dynamic raw) {
    return dco_decode_mod_loader(raw);
  }

  @protected
  UILayoutValue dco_decode_box_autoadd_ui_layout_value(dynamic raw) {
    return dco_decode_ui_layout_value(raw);
  }

  @protected
  int dco_decode_box_autoadd_usize(dynamic raw) {
    return dco_decode_usize(raw);
  }

  @protected
  VersionMetadata dco_decode_box_autoadd_version_metadata(dynamic raw) {
    return dco_decode_version_metadata(raw);
  }

  @protected
  CollectionId dco_decode_collection_id(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CollectionId(
      field0: dco_decode_String(arr[0]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    return raw as int;
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  List<MinecraftAccount> dco_decode_list_minecraft_account(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_minecraft_account).toList();
  }

  @protected
  List<MinecraftCape> dco_decode_list_minecraft_cape(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_minecraft_cape).toList();
  }

  @protected
  List<MinecraftSkin> dco_decode_list_minecraft_skin(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_minecraft_skin).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  List<VersionMetadata> dco_decode_list_version_metadata(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_version_metadata).toList();
  }

  @protected
  LoginFlowDeviceCode dco_decode_login_flow_device_code(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LoginFlowDeviceCode(
      verificationUri: dco_decode_String(arr[0]),
      userCode: dco_decode_String(arr[1]),
    );
  }

  @protected
  LoginFlowErrors dco_decode_login_flow_errors(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return LoginFlowErrors_XstsError(
          dco_decode_xsts_token_error_type(raw[1]),
        );
      case 1:
        return LoginFlowErrors_GameNotOwned();
      case 2:
        return LoginFlowErrors_UnknownError(
          dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  LoginFlowEvent dco_decode_login_flow_event(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return LoginFlowEvent_Stage(
          dco_decode_login_flow_stage(raw[1]),
        );
      case 1:
        return LoginFlowEvent_DeviceCode(
          dco_decode_box_autoadd_login_flow_device_code(raw[1]),
        );
      case 2:
        return LoginFlowEvent_Error(
          dco_decode_box_autoadd_login_flow_errors(raw[1]),
        );
      case 3:
        return LoginFlowEvent_Success(
          dco_decode_box_autoadd_minecraft_account(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  LoginFlowStage dco_decode_login_flow_stage(dynamic raw) {
    return LoginFlowStage.values[raw as int];
  }

  @protected
  MinecraftAccount dco_decode_minecraft_account(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return MinecraftAccount(
      username: dco_decode_String(arr[0]),
      uuid: dco_decode_Uuid(arr[1]),
      accessToken: dco_decode_account_token(arr[2]),
      refreshToken: dco_decode_account_token(arr[3]),
      skins: dco_decode_list_minecraft_skin(arr[4]),
      capes: dco_decode_list_minecraft_cape(arr[5]),
    );
  }

  @protected
  MinecraftCape dco_decode_minecraft_cape(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MinecraftCape(
      id: dco_decode_Uuid(arr[0]),
      state: dco_decode_String(arr[1]),
      url: dco_decode_String(arr[2]),
      alias: dco_decode_String(arr[3]),
    );
  }

  @protected
  MinecraftSkin dco_decode_minecraft_skin(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return MinecraftSkin(
      id: dco_decode_Uuid(arr[0]),
      state: dco_decode_String(arr[1]),
      url: dco_decode_String(arr[2]),
      variant: dco_decode_minecraft_skin_variant(arr[3]),
    );
  }

  @protected
  MinecraftSkinVariant dco_decode_minecraft_skin_variant(dynamic raw) {
    return MinecraftSkinVariant.values[raw as int];
  }

  @protected
  ModLoader dco_decode_mod_loader(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ModLoader(
      modLoaderType: dco_decode_mod_loader_type(arr[0]),
      version: dco_decode_String(arr[1]),
    );
  }

  @protected
  ModLoaderType dco_decode_mod_loader_type(dynamic raw) {
    return ModLoaderType.values[raw as int];
  }

  @protected
  UuidValue? dco_decode_opt_Uuid(dynamic raw) {
    return raw == null ? null : dco_decode_Uuid(raw);
  }

  @protected
  AdvancedOptions? dco_decode_opt_box_autoadd_advanced_options(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_advanced_options(raw);
  }

  @protected
  ModLoader? dco_decode_opt_box_autoadd_mod_loader(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_mod_loader(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  UILayoutKey dco_decode_ui_layout_key(dynamic raw) {
    return UILayoutKey.values[raw as int];
  }

  @protected
  UILayoutValue dco_decode_ui_layout_value(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return UILayoutValue_CompletedSetup(
          dco_decode_bool(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  VersionMetadata dco_decode_version_metadata(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return VersionMetadata(
      id: dco_decode_String(arr[0]),
      versionType: dco_decode_version_type(arr[1]),
      url: dco_decode_String(arr[2]),
      uploadedTime: dco_decode_Chrono_Utc(arr[3]),
      releaseTime: dco_decode_Chrono_Utc(arr[4]),
      sha1: dco_decode_String(arr[5]),
      complianceLevel: dco_decode_u_32(arr[6]),
    );
  }

  @protected
  VersionType dco_decode_version_type(dynamic raw) {
    return VersionType.values[raw as int];
  }

  @protected
  XstsTokenErrorType dco_decode_xsts_token_error_type(dynamic raw) {
    return XstsTokenErrorType.values[raw as int];
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  PathBuf sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockPathBuf(
      SseDeserializer deserializer) {
    return PathBuf.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VecStorageLoader
      sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockVeccrateapibackend_exclusivestoragestorage_loaderStorageLoader(
          SseDeserializer deserializer) {
    return VecStorageLoader.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StorageLoaderPathBuf
      sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockcrateapibackend_exclusivestoragestorage_loaderStorageLoaderPathBuf(
          SseDeserializer deserializer) {
    return StorageLoaderPathBuf.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Collection
      sse_decode_Auto_Ref_RustOpaque_stdsyncRwLockcrateapishared_resourcescollectionCollection(
          SseDeserializer deserializer) {
    return Collection.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  DateTime sse_decode_Chrono_Utc(SseDeserializer deserializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  @protected
  PathBuf sse_decode_RustOpaque_stdsyncRwLockPathBuf(
      SseDeserializer deserializer) {
    return PathBuf.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VecStorageLoader
      sse_decode_RustOpaque_stdsyncRwLockVeccrateapibackend_exclusivestoragestorage_loaderStorageLoader(
          SseDeserializer deserializer) {
    return VecStorageLoader.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StorageLoaderPathBuf
      sse_decode_RustOpaque_stdsyncRwLockcrateapibackend_exclusivestoragestorage_loaderStorageLoaderPathBuf(
          SseDeserializer deserializer) {
    return StorageLoaderPathBuf.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Collection
      sse_decode_RustOpaque_stdsyncRwLockcrateapishared_resourcescollectionCollection(
          SseDeserializer deserializer) {
    return Collection.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  @protected
  AccountStorageKey sse_decode_account_storage_key(
      SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return AccountStorageKey.values[inner];
  }

  @protected
  AccountStorageValue sse_decode_account_storage_value(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_minecraft_account(deserializer);
        return AccountStorageValue_Accounts(var_field0);
      case 1:
        var var_field0 = sse_decode_opt_Uuid(deserializer);
        return AccountStorageValue_MainAccount(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  AccountToken sse_decode_account_token(SseDeserializer deserializer) {
    var var_token = sse_decode_String(deserializer);
    var var_expiresAt = sse_decode_i_64(deserializer);
    return AccountToken(token: var_token, expiresAt: var_expiresAt);
  }

  @protected
  AdvancedOptions sse_decode_advanced_options(SseDeserializer deserializer) {
    var var_jvmMaxMemory = sse_decode_opt_box_autoadd_usize(deserializer);
    return AdvancedOptions(jvmMaxMemory: var_jvmMaxMemory);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AdvancedOptions sse_decode_box_autoadd_advanced_options(
      SseDeserializer deserializer) {
    return (sse_decode_advanced_options(deserializer));
  }

  @protected
  LoginFlowDeviceCode sse_decode_box_autoadd_login_flow_device_code(
      SseDeserializer deserializer) {
    return (sse_decode_login_flow_device_code(deserializer));
  }

  @protected
  LoginFlowErrors sse_decode_box_autoadd_login_flow_errors(
      SseDeserializer deserializer) {
    return (sse_decode_login_flow_errors(deserializer));
  }

  @protected
  MinecraftAccount sse_decode_box_autoadd_minecraft_account(
      SseDeserializer deserializer) {
    return (sse_decode_minecraft_account(deserializer));
  }

  @protected
  MinecraftSkin sse_decode_box_autoadd_minecraft_skin(
      SseDeserializer deserializer) {
    return (sse_decode_minecraft_skin(deserializer));
  }

  @protected
  ModLoader sse_decode_box_autoadd_mod_loader(SseDeserializer deserializer) {
    return (sse_decode_mod_loader(deserializer));
  }

  @protected
  UILayoutValue sse_decode_box_autoadd_ui_layout_value(
      SseDeserializer deserializer) {
    return (sse_decode_ui_layout_value(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    return (sse_decode_usize(deserializer));
  }

  @protected
  VersionMetadata sse_decode_box_autoadd_version_metadata(
      SseDeserializer deserializer) {
    return (sse_decode_version_metadata(deserializer));
  }

  @protected
  CollectionId sse_decode_collection_id(SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    return CollectionId(field0: var_field0);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    return deserializer.buffer.getInt64();
  }

  @protected
  List<MinecraftAccount> sse_decode_list_minecraft_account(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MinecraftAccount>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_minecraft_account(deserializer));
    }
    return ans_;
  }

  @protected
  List<MinecraftCape> sse_decode_list_minecraft_cape(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MinecraftCape>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_minecraft_cape(deserializer));
    }
    return ans_;
  }

  @protected
  List<MinecraftSkin> sse_decode_list_minecraft_skin(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MinecraftSkin>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_minecraft_skin(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<VersionMetadata> sse_decode_list_version_metadata(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <VersionMetadata>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_version_metadata(deserializer));
    }
    return ans_;
  }

  @protected
  LoginFlowDeviceCode sse_decode_login_flow_device_code(
      SseDeserializer deserializer) {
    var var_verificationUri = sse_decode_String(deserializer);
    var var_userCode = sse_decode_String(deserializer);
    return LoginFlowDeviceCode(
        verificationUri: var_verificationUri, userCode: var_userCode);
  }

  @protected
  LoginFlowErrors sse_decode_login_flow_errors(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_xsts_token_error_type(deserializer);
        return LoginFlowErrors_XstsError(var_field0);
      case 1:
        return LoginFlowErrors_GameNotOwned();
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return LoginFlowErrors_UnknownError(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  LoginFlowEvent sse_decode_login_flow_event(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_login_flow_stage(deserializer);
        return LoginFlowEvent_Stage(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_login_flow_device_code(deserializer);
        return LoginFlowEvent_DeviceCode(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_login_flow_errors(deserializer);
        return LoginFlowEvent_Error(var_field0);
      case 3:
        var var_field0 = sse_decode_box_autoadd_minecraft_account(deserializer);
        return LoginFlowEvent_Success(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  LoginFlowStage sse_decode_login_flow_stage(SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return LoginFlowStage.values[inner];
  }

  @protected
  MinecraftAccount sse_decode_minecraft_account(SseDeserializer deserializer) {
    var var_username = sse_decode_String(deserializer);
    var var_uuid = sse_decode_Uuid(deserializer);
    var var_accessToken = sse_decode_account_token(deserializer);
    var var_refreshToken = sse_decode_account_token(deserializer);
    var var_skins = sse_decode_list_minecraft_skin(deserializer);
    var var_capes = sse_decode_list_minecraft_cape(deserializer);
    return MinecraftAccount(
        username: var_username,
        uuid: var_uuid,
        accessToken: var_accessToken,
        refreshToken: var_refreshToken,
        skins: var_skins,
        capes: var_capes);
  }

  @protected
  MinecraftCape sse_decode_minecraft_cape(SseDeserializer deserializer) {
    var var_id = sse_decode_Uuid(deserializer);
    var var_state = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_alias = sse_decode_String(deserializer);
    return MinecraftCape(
        id: var_id, state: var_state, url: var_url, alias: var_alias);
  }

  @protected
  MinecraftSkin sse_decode_minecraft_skin(SseDeserializer deserializer) {
    var var_id = sse_decode_Uuid(deserializer);
    var var_state = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_variant = sse_decode_minecraft_skin_variant(deserializer);
    return MinecraftSkin(
        id: var_id, state: var_state, url: var_url, variant: var_variant);
  }

  @protected
  MinecraftSkinVariant sse_decode_minecraft_skin_variant(
      SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return MinecraftSkinVariant.values[inner];
  }

  @protected
  ModLoader sse_decode_mod_loader(SseDeserializer deserializer) {
    var var_modLoaderType = sse_decode_mod_loader_type(deserializer);
    var var_version = sse_decode_String(deserializer);
    return ModLoader(modLoaderType: var_modLoaderType, version: var_version);
  }

  @protected
  ModLoaderType sse_decode_mod_loader_type(SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return ModLoaderType.values[inner];
  }

  @protected
  UuidValue? sse_decode_opt_Uuid(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Uuid(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AdvancedOptions? sse_decode_opt_box_autoadd_advanced_options(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_advanced_options(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ModLoader? sse_decode_opt_box_autoadd_mod_loader(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_mod_loader(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  UILayoutKey sse_decode_ui_layout_key(SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return UILayoutKey.values[inner];
  }

  @protected
  UILayoutValue sse_decode_ui_layout_value(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_bool(deserializer);
        return UILayoutValue_CompletedSetup(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  @protected
  VersionMetadata sse_decode_version_metadata(SseDeserializer deserializer) {
    var var_id = sse_decode_String(deserializer);
    var var_versionType = sse_decode_version_type(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_uploadedTime = sse_decode_Chrono_Utc(deserializer);
    var var_releaseTime = sse_decode_Chrono_Utc(deserializer);
    var var_sha1 = sse_decode_String(deserializer);
    var var_complianceLevel = sse_decode_u_32(deserializer);
    return VersionMetadata(
        id: var_id,
        versionType: var_versionType,
        url: var_url,
        uploadedTime: var_uploadedTime,
        releaseTime: var_releaseTime,
        sha1: var_sha1,
        complianceLevel: var_complianceLevel);
  }

  @protected
  VersionType sse_decode_version_type(SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return VersionType.values[inner];
  }

  @protected
  XstsTokenErrorType sse_decode_xsts_token_error_type(
      SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return XstsTokenErrorType.values[inner];
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockPathBuf(
      PathBuf raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer
      cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockVeccrateapibackend_exclusivestoragestorage_loaderStorageLoader(
          VecStorageLoader raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer
      cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockcrateapibackend_exclusivestoragestorage_loaderStorageLoaderPathBuf(
          StorageLoaderPathBuf raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer
      cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockcrateapishared_resourcescollectionCollection(
          Collection raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockPathBuf(PathBuf raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer
      cst_encode_RustOpaque_stdsyncRwLockVeccrateapibackend_exclusivestoragestorage_loaderStorageLoader(
          VecStorageLoader raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer
      cst_encode_RustOpaque_stdsyncRwLockcrateapibackend_exclusivestoragestorage_loaderStorageLoaderPathBuf(
          StorageLoaderPathBuf raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer
      cst_encode_RustOpaque_stdsyncRwLockcrateapishared_resourcescollectionCollection(
          Collection raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_account_storage_key(AccountStorageKey raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  bool cst_encode_bool(bool raw) {
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    return raw;
  }

  @protected
  int cst_encode_login_flow_stage(LoginFlowStage raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_minecraft_skin_variant(MinecraftSkinVariant raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_mod_loader_type(ModLoaderType raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_32(int raw) {
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  int cst_encode_ui_layout_key(UILayoutKey raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  int cst_encode_usize(int raw) {
    return raw;
  }

  @protected
  int cst_encode_version_type(VersionType raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_xsts_token_error_type(XstsTokenErrorType raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockPathBuf(
      PathBuf self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockVeccrateapibackend_exclusivestoragestorage_loaderStorageLoader(
          VecStorageLoader self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockcrateapibackend_exclusivestoragestorage_loaderStorageLoaderPathBuf(
          StorageLoaderPathBuf self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockcrateapishared_resourcescollectionCollection(
          Collection self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Chrono_Utc(DateTime self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockPathBuf(
      PathBuf self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_stdsyncRwLockVeccrateapibackend_exclusivestoragestorage_loaderStorageLoader(
          VecStorageLoader self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_stdsyncRwLockcrateapibackend_exclusivestoragestorage_loaderStorageLoaderPathBuf(
          StorageLoaderPathBuf self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_stdsyncRwLockcrateapishared_resourcescollectionCollection(
          Collection self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  @protected
  void sse_encode_account_storage_key(
      AccountStorageKey self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_account_storage_value(
      AccountStorageValue self, SseSerializer serializer) {
    switch (self) {
      case AccountStorageValue_Accounts(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_minecraft_account(field0, serializer);
      case AccountStorageValue_MainAccount(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_opt_Uuid(field0, serializer);
    }
  }

  @protected
  void sse_encode_account_token(AccountToken self, SseSerializer serializer) {
    sse_encode_String(self.token, serializer);
    sse_encode_i_64(self.expiresAt, serializer);
  }

  @protected
  void sse_encode_advanced_options(
      AdvancedOptions self, SseSerializer serializer) {
    sse_encode_opt_box_autoadd_usize(self.jvmMaxMemory, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_advanced_options(
      AdvancedOptions self, SseSerializer serializer) {
    sse_encode_advanced_options(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_login_flow_device_code(
      LoginFlowDeviceCode self, SseSerializer serializer) {
    sse_encode_login_flow_device_code(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_login_flow_errors(
      LoginFlowErrors self, SseSerializer serializer) {
    sse_encode_login_flow_errors(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_minecraft_account(
      MinecraftAccount self, SseSerializer serializer) {
    sse_encode_minecraft_account(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_minecraft_skin(
      MinecraftSkin self, SseSerializer serializer) {
    sse_encode_minecraft_skin(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_mod_loader(
      ModLoader self, SseSerializer serializer) {
    sse_encode_mod_loader(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ui_layout_value(
      UILayoutValue self, SseSerializer serializer) {
    sse_encode_ui_layout_value(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(int self, SseSerializer serializer) {
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_version_metadata(
      VersionMetadata self, SseSerializer serializer) {
    sse_encode_version_metadata(self, serializer);
  }

  @protected
  void sse_encode_collection_id(CollectionId self, SseSerializer serializer) {
    sse_encode_String(self.field0, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_list_minecraft_account(
      List<MinecraftAccount> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_minecraft_account(item, serializer);
    }
  }

  @protected
  void sse_encode_list_minecraft_cape(
      List<MinecraftCape> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_minecraft_cape(item, serializer);
    }
  }

  @protected
  void sse_encode_list_minecraft_skin(
      List<MinecraftSkin> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_minecraft_skin(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_version_metadata(
      List<VersionMetadata> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_version_metadata(item, serializer);
    }
  }

  @protected
  void sse_encode_login_flow_device_code(
      LoginFlowDeviceCode self, SseSerializer serializer) {
    sse_encode_String(self.verificationUri, serializer);
    sse_encode_String(self.userCode, serializer);
  }

  @protected
  void sse_encode_login_flow_errors(
      LoginFlowErrors self, SseSerializer serializer) {
    switch (self) {
      case LoginFlowErrors_XstsError(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_xsts_token_error_type(field0, serializer);
      case LoginFlowErrors_GameNotOwned():
        sse_encode_i_32(1, serializer);
      case LoginFlowErrors_UnknownError(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_login_flow_event(
      LoginFlowEvent self, SseSerializer serializer) {
    switch (self) {
      case LoginFlowEvent_Stage(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_login_flow_stage(field0, serializer);
      case LoginFlowEvent_DeviceCode(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_login_flow_device_code(field0, serializer);
      case LoginFlowEvent_Error(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_login_flow_errors(field0, serializer);
      case LoginFlowEvent_Success(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_minecraft_account(field0, serializer);
    }
  }

  @protected
  void sse_encode_login_flow_stage(
      LoginFlowStage self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_minecraft_account(
      MinecraftAccount self, SseSerializer serializer) {
    sse_encode_String(self.username, serializer);
    sse_encode_Uuid(self.uuid, serializer);
    sse_encode_account_token(self.accessToken, serializer);
    sse_encode_account_token(self.refreshToken, serializer);
    sse_encode_list_minecraft_skin(self.skins, serializer);
    sse_encode_list_minecraft_cape(self.capes, serializer);
  }

  @protected
  void sse_encode_minecraft_cape(MinecraftCape self, SseSerializer serializer) {
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.state, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.alias, serializer);
  }

  @protected
  void sse_encode_minecraft_skin(MinecraftSkin self, SseSerializer serializer) {
    sse_encode_Uuid(self.id, serializer);
    sse_encode_String(self.state, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_minecraft_skin_variant(self.variant, serializer);
  }

  @protected
  void sse_encode_minecraft_skin_variant(
      MinecraftSkinVariant self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_mod_loader(ModLoader self, SseSerializer serializer) {
    sse_encode_mod_loader_type(self.modLoaderType, serializer);
    sse_encode_String(self.version, serializer);
  }

  @protected
  void sse_encode_mod_loader_type(
      ModLoaderType self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_Uuid(UuidValue? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Uuid(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_advanced_options(
      AdvancedOptions? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_advanced_options(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_mod_loader(
      ModLoader? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_mod_loader(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_ui_layout_key(UILayoutKey self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_ui_layout_value(
      UILayoutValue self, SseSerializer serializer) {
    switch (self) {
      case UILayoutValue_CompletedSetup(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_bool(field0, serializer);
    }
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_version_metadata(
      VersionMetadata self, SseSerializer serializer) {
    sse_encode_String(self.id, serializer);
    sse_encode_version_type(self.versionType, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_Chrono_Utc(self.uploadedTime, serializer);
    sse_encode_Chrono_Utc(self.releaseTime, serializer);
    sse_encode_String(self.sha1, serializer);
    sse_encode_u_32(self.complianceLevel, serializer);
  }

  @protected
  void sse_encode_version_type(VersionType self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_xsts_token_error_type(
      XstsTokenErrorType self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }
}
