// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.21.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use crate::api::shared_resources::authentication::account::*;
use crate::api::shared_resources::collection::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.21";

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_MinecraftSkin_get_head_file_path_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::shared_resources::authentication::account::MinecraftSkin>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "MinecraftSkin_get_head_file_path", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::shared_resources::authentication::account::MinecraftSkin::get_head_file_path(&api_that))
                    })())
                } })
}
fn wire_Collection_create_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    display_name: impl CstDecode<String>,
    version_metadata: impl CstDecode<crate::api::backend_exclusive::vanilla::version::VersionMetadata>,
    mod_loader: impl CstDecode<Option<crate::api::shared_resources::collection::ModLoader>>,
    advanced_options: impl CstDecode<Option<crate::api::shared_resources::collection::AdvancedOptions>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Collection_create",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_display_name = display_name.cst_decode();
            let api_version_metadata = version_metadata.cst_decode();
            let api_mod_loader = mod_loader.cst_decode();
            let api_advanced_options = advanced_options.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        crate::api::shared_resources::collection::Collection::create(
                            api_display_name,
                            api_version_metadata,
                            api_mod_loader,
                            api_advanced_options,
                        )
                        .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_Collection_download_game_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Collection>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Collection_download_game",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
                        crate::api::shared_resources::collection::Collection::download_game(
                            &mut api_that,
                        )
                        .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_Collection_game_directory_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Collection>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Collection_game_directory",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
                    Result::<_, ()>::Ok(
                        crate::api::shared_resources::collection::Collection::game_directory(
                            &api_that,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_Collection_get_base_path_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Collection_get_base_path",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::shared_resources::collection::Collection::get_base_path(),
                    )
                })())
            }
        },
    )
}
fn wire_Collection_get_collection_id_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Collection>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Collection_get_collection_id",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
                    Result::<_, ()>::Ok(
                        crate::api::shared_resources::collection::Collection::get_collection_id(
                            &api_that,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_Collection_get_loader_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Collection>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Collection_get_loader",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
                    crate::api::shared_resources::collection::Collection::get_loader(&api_that)
                })())
            }
        },
    )
}
fn wire_Collection_launch_game_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Collection>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Collection_launch_game",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
                        crate::api::shared_resources::collection::Collection::launch_game(
                            &mut api_that,
                        )
                        .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_Collection_scan_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "Collection_scan",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::shared_resources::collection::Collection::scan()
                })())
            }
        },
    )
}
fn wire_create_collection_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    display_name: impl CstDecode<String>,
    version_metadata: impl CstDecode<crate::api::backend_exclusive::vanilla::version::VersionMetadata>,
    mod_loader: impl CstDecode<Option<crate::api::shared_resources::collection::ModLoader>>,
    advanced_options: impl CstDecode<Option<crate::api::shared_resources::collection::AdvancedOptions>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_collection",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_display_name = display_name.cst_decode();
            let api_version_metadata = version_metadata.cst_decode();
            let api_mod_loader = mod_loader.cst_decode();
            let api_advanced_options = advanced_options.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        crate::api::shared_resources::entry::create_collection(
                            api_display_name,
                            api_version_metadata,
                            api_mod_loader,
                            api_advanced_options,
                        )
                        .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_get_account_storage_impl(
    key: impl CstDecode<crate::api::backend_exclusive::storage::account_storage::AccountStorageKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_account_storage",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_key = key.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::api::shared_resources::entry::get_account_storage(
                    api_key,
                ))
            })())
        },
    )
}
fn wire_get_skin_file_path_impl(
    skin: impl CstDecode<crate::api::shared_resources::authentication::account::MinecraftSkin>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_skin_file_path",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_skin = skin.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::api::shared_resources::entry::get_skin_file_path(
                    api_skin,
                ))
            })())
        },
    )
}
fn wire_get_ui_layout_storage_impl(
    key: impl CstDecode<crate::api::backend_exclusive::storage::ui_layout::UILayoutKey>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_ui_layout_storage",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_key = key.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::api::shared_resources::entry::get_ui_layout_storage(
                    api_key,
                ))
            })())
        },
    )
}
fn wire_get_vanilla_versions_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_vanilla_versions",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        crate::api::shared_resources::entry::get_vanilla_versions().await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_init_app_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || crate::api::shared_resources::entry::init_app())())
            }
        },
    )
}
fn wire_minecraft_login_flow_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "minecraft_login_flow", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::shared_resources::entry::minecraft_login_flow(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent>())).await
                    })().await)
                } })
}
fn wire_remove_minecraft_account_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    uuid: impl CstDecode<uuid::Uuid>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "remove_minecraft_account",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_uuid = uuid.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        crate::api::shared_resources::entry::remove_minecraft_account(api_uuid)
                            .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_set_ui_layout_storage_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<crate::api::backend_exclusive::storage::ui_layout::UILayoutValue>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_ui_layout_storage",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::shared_resources::entry::set_ui_layout_storage(api_value)
                })())
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<chrono::DateTime<chrono::Utc>> for i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> chrono::DateTime<chrono::Utc> {
        let flutter_rust_bridge::for_generated::Timestamp { s, ns } =
            flutter_rust_bridge::for_generated::decode_timestamp(self);
        chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        )
    }
}
impl CstDecode<crate::api::backend_exclusive::storage::account_storage::AccountStorageKey> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::backend_exclusive::storage::account_storage::AccountStorageKey {
        match self {
            0 => crate::api::backend_exclusive::storage::account_storage::AccountStorageKey::Accounts,
1 => crate::api::backend_exclusive::storage::account_storage::AccountStorageKey::MainAccount,
            _ => unreachable!("Invalid variant for AccountStorageKey: {}", self),
        }
    }
}
impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<i64> for i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i64 {
        self
    }
}
impl CstDecode<crate::api::shared_resources::authentication::msa_flow::LoginFlowStage> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::shared_resources::authentication::msa_flow::LoginFlowStage {
        match self {
            0 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::FetchingDeviceCode,
1 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::WaitingForUser,
2 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::AuthenticatingXboxLive,
3 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::FetchingXstsToken,
4 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::FetchingMinecraftToken,
5 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::GettingProfile,
            _ => unreachable!("Invalid variant for LoginFlowStage: {}", self),
        }
    }
}
impl CstDecode<crate::api::shared_resources::authentication::account::MinecraftSkinVariant>
    for i32
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::shared_resources::authentication::account::MinecraftSkinVariant {
        match self {
            0 => {
                crate::api::shared_resources::authentication::account::MinecraftSkinVariant::Classic
            }
            1 => crate::api::shared_resources::authentication::account::MinecraftSkinVariant::Slim,
            _ => unreachable!("Invalid variant for MinecraftSkinVariant: {}", self),
        }
    }
}
impl CstDecode<crate::api::shared_resources::collection::ModLoaderType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::shared_resources::collection::ModLoaderType {
        match self {
            0 => crate::api::shared_resources::collection::ModLoaderType::Forge,
            1 => crate::api::shared_resources::collection::ModLoaderType::NeoForge,
            2 => crate::api::shared_resources::collection::ModLoaderType::Fabric,
            3 => crate::api::shared_resources::collection::ModLoaderType::Quilt,
            _ => unreachable!("Invalid variant for ModLoaderType: {}", self),
        }
    }
}
impl CstDecode<u32> for u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<crate::api::backend_exclusive::storage::ui_layout::UILayoutKey> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::backend_exclusive::storage::ui_layout::UILayoutKey {
        match self {
            0 => crate::api::backend_exclusive::storage::ui_layout::UILayoutKey::CompletedSetup,
            _ => unreachable!("Invalid variant for UILayoutKey: {}", self),
        }
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl CstDecode<crate::api::backend_exclusive::vanilla::version::VersionType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::backend_exclusive::vanilla::version::VersionType {
        match self {
            0 => crate::api::backend_exclusive::vanilla::version::VersionType::Release,
            1 => crate::api::backend_exclusive::vanilla::version::VersionType::Snapshot,
            2 => crate::api::backend_exclusive::vanilla::version::VersionType::OldBeta,
            3 => crate::api::backend_exclusive::vanilla::version::VersionType::OldAlpha,
            _ => unreachable!("Invalid variant for VersionType: {}", self),
        }
    }
}
impl CstDecode<crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType {
        match self {
            0 => crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::DoesNotHaveXboxAccount,
1 => crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::CountryNotAvailable,
2 => crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::NeedsAdultVerificationKR1,
3 => crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::NeedsAdultVerificationKR2,
4 => crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::ChildAccount,
            _ => unreachable!("Invalid variant for XstsTokenErrorType: {}", self),
        }
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("The type Delegate(AnyhowException) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseDecode for Collection {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Collection>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for PathBuf {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<PathBuf>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("The type Delegate(Time(Utc)) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Collection>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<PathBuf>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for uuid::Uuid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("The type Delegate(Uuid) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseDecode for crate::api::backend_exclusive::storage::account_storage::AccountStorageKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::backend_exclusive::storage::account_storage::AccountStorageKey::Accounts,
1 => crate::api::backend_exclusive::storage::account_storage::AccountStorageKey::MainAccount,
            _ => unreachable!("Invalid variant for AccountStorageKey: {}", inner),
        };
    }
}

impl SseDecode for crate::api::backend_exclusive::storage::account_storage::AccountStorageValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<
                    crate::api::shared_resources::authentication::account::MinecraftAccount,
                >>::sse_decode(deserializer);
                return crate::api::backend_exclusive::storage::account_storage::AccountStorageValue::Accounts(var_field0);
            }
            1 => {
                let mut var_field0 = <Option<uuid::Uuid>>::sse_decode(deserializer);
                return crate::api::backend_exclusive::storage::account_storage::AccountStorageValue::MainAccount(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::shared_resources::authentication::account::AccountToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_token = <String>::sse_decode(deserializer);
        let mut var_expiresAt = <i64>::sse_decode(deserializer);
        return crate::api::shared_resources::authentication::account::AccountToken {
            token: var_token,
            expires_at: var_expiresAt,
        };
    }
}

impl SseDecode for crate::api::shared_resources::collection::AdvancedOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_jvmMaxMemory = <Option<usize>>::sse_decode(deserializer);
        return crate::api::shared_resources::collection::AdvancedOptions {
            jvm_max_memory: var_jvmMaxMemory,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::shared_resources::collection::CollectionId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        return crate::api::shared_resources::collection::CollectionId(var_field0);
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<crate::api::shared_resources::authentication::account::MinecraftAccount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::shared_resources::authentication::account::MinecraftAccount>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::shared_resources::authentication::account::MinecraftCape> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::shared_resources::authentication::account::MinecraftCape>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::shared_resources::authentication::account::MinecraftSkin> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::shared_resources::authentication::account::MinecraftSkin>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::backend_exclusive::storage::storage_loader::StorageLoader> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::backend_exclusive::storage::storage_loader::StorageLoader>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::backend_exclusive::vanilla::version::VersionMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::backend_exclusive::vanilla::version::VersionMetadata>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for crate::api::shared_resources::authentication::msa_flow::LoginFlowDeviceCode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_verificationUri = <String>::sse_decode(deserializer);
        let mut var_userCode = <String>::sse_decode(deserializer);
        return crate::api::shared_resources::authentication::msa_flow::LoginFlowDeviceCode {
            verification_uri: var_verificationUri,
            user_code: var_userCode,
        };
    }
}

impl SseDecode for crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType>::sse_decode(deserializer);
                return crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors::XstsError(var_field0);
            }
            1 => {
                return crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors::GameNotOwned;
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors::UnknownError(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::shared_resources::authentication::msa_flow::LoginFlowStage>::sse_decode(deserializer);
                return crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::Stage(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::shared_resources::authentication::msa_flow::LoginFlowDeviceCode>::sse_decode(deserializer);
                return crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::DeviceCode(var_field0);
            }
            2 => {
                let mut var_field0 = <crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors>::sse_decode(deserializer);
                return crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::Error(var_field0);
            }
            3 => {
                let mut var_field0 = <crate::api::shared_resources::authentication::account::MinecraftAccount>::sse_decode(deserializer);
                return crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::Success(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::shared_resources::authentication::msa_flow::LoginFlowStage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::FetchingDeviceCode,
1 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::WaitingForUser,
2 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::AuthenticatingXboxLive,
3 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::FetchingXstsToken,
4 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::FetchingMinecraftToken,
5 => crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::GettingProfile,
            _ => unreachable!("Invalid variant for LoginFlowStage: {}", inner),
        };
    }
}

impl SseDecode for crate::api::shared_resources::authentication::account::MinecraftAccount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_username = <String>::sse_decode(deserializer);
        let mut var_uuid = <uuid::Uuid>::sse_decode(deserializer);
        let mut var_accessToken =
            <crate::api::shared_resources::authentication::account::AccountToken>::sse_decode(
                deserializer,
            );
        let mut var_refreshToken =
            <crate::api::shared_resources::authentication::account::AccountToken>::sse_decode(
                deserializer,
            );
        let mut var_skins = <Vec<
            crate::api::shared_resources::authentication::account::MinecraftSkin,
        >>::sse_decode(deserializer);
        let mut var_capes = <Vec<
            crate::api::shared_resources::authentication::account::MinecraftCape,
        >>::sse_decode(deserializer);
        return crate::api::shared_resources::authentication::account::MinecraftAccount {
            username: var_username,
            uuid: var_uuid,
            access_token: var_accessToken,
            refresh_token: var_refreshToken,
            skins: var_skins,
            capes: var_capes,
        };
    }
}

impl SseDecode for crate::api::shared_resources::authentication::account::MinecraftCape {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <uuid::Uuid>::sse_decode(deserializer);
        let mut var_state = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_alias = <String>::sse_decode(deserializer);
        return crate::api::shared_resources::authentication::account::MinecraftCape {
            id: var_id,
            state: var_state,
            url: var_url,
            alias: var_alias,
        };
    }
}

impl SseDecode for crate::api::shared_resources::authentication::account::MinecraftSkin {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <uuid::Uuid>::sse_decode(deserializer);
        let mut var_state = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_variant = <crate::api::shared_resources::authentication::account::MinecraftSkinVariant>::sse_decode(deserializer);
        return crate::api::shared_resources::authentication::account::MinecraftSkin {
            id: var_id,
            state: var_state,
            url: var_url,
            variant: var_variant,
        };
    }
}

impl SseDecode for crate::api::shared_resources::authentication::account::MinecraftSkinVariant {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => {
                crate::api::shared_resources::authentication::account::MinecraftSkinVariant::Classic
            }
            1 => crate::api::shared_resources::authentication::account::MinecraftSkinVariant::Slim,
            _ => unreachable!("Invalid variant for MinecraftSkinVariant: {}", inner),
        };
    }
}

impl SseDecode for crate::api::shared_resources::collection::ModLoader {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_modLoaderType =
            <crate::api::shared_resources::collection::ModLoaderType>::sse_decode(deserializer);
        let mut var_version = <String>::sse_decode(deserializer);
        return crate::api::shared_resources::collection::ModLoader {
            mod_loader_type: var_modLoaderType,
            version: var_version,
        };
    }
}

impl SseDecode for crate::api::shared_resources::collection::ModLoaderType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::shared_resources::collection::ModLoaderType::Forge,
            1 => crate::api::shared_resources::collection::ModLoaderType::NeoForge,
            2 => crate::api::shared_resources::collection::ModLoaderType::Fabric,
            3 => crate::api::shared_resources::collection::ModLoaderType::Quilt,
            _ => unreachable!("Invalid variant for ModLoaderType: {}", inner),
        };
    }
}

impl SseDecode for Option<uuid::Uuid> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<uuid::Uuid>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::shared_resources::collection::AdvancedOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::shared_resources::collection::AdvancedOptions>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::shared_resources::collection::ModLoader> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::shared_resources::collection::ModLoader>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::backend_exclusive::storage::storage_loader::StorageLoader {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fileName = <String>::sse_decode(deserializer);
        let mut var_basePath = <PathBuf>::sse_decode(deserializer);
        return crate::api::backend_exclusive::storage::storage_loader::StorageLoader {
            file_name: var_fileName,
            base_path: var_basePath,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for crate::api::backend_exclusive::storage::ui_layout::UILayoutKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::backend_exclusive::storage::ui_layout::UILayoutKey::CompletedSetup,
            _ => unreachable!("Invalid variant for UILayoutKey: {}", inner),
        };
    }
}

impl SseDecode for crate::api::backend_exclusive::storage::ui_layout::UILayoutValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return crate::api::backend_exclusive::storage::ui_layout::UILayoutValue::CompletedSetup(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::api::backend_exclusive::vanilla::version::VersionMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_versionType =
            <crate::api::backend_exclusive::vanilla::version::VersionType>::sse_decode(
                deserializer,
            );
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_uploadedTime = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_releaseTime = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_sha1 = <String>::sse_decode(deserializer);
        let mut var_complianceLevel = <u32>::sse_decode(deserializer);
        return crate::api::backend_exclusive::vanilla::version::VersionMetadata {
            id: var_id,
            version_type: var_versionType,
            url: var_url,
            uploaded_time: var_uploadedTime,
            release_time: var_releaseTime,
            sha1: var_sha1,
            compliance_level: var_complianceLevel,
        };
    }
}

impl SseDecode for crate::api::backend_exclusive::vanilla::version::VersionType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::backend_exclusive::vanilla::version::VersionType::Release,
            1 => crate::api::backend_exclusive::vanilla::version::VersionType::Snapshot,
            2 => crate::api::backend_exclusive::vanilla::version::VersionType::OldBeta,
            3 => crate::api::backend_exclusive::vanilla::version::VersionType::OldAlpha,
            _ => unreachable!("Invalid variant for VersionType: {}", inner),
        };
    }
}

impl SseDecode for crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::DoesNotHaveXboxAccount,
1 => crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::CountryNotAvailable,
2 => crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::NeedsAdultVerificationKR1,
3 => crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::NeedsAdultVerificationKR2,
4 => crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::ChildAccount,
            _ => unreachable!("Invalid variant for XstsTokenErrorType: {}", inner),
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

pub struct Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockCollection(
    Collection,
);
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockCollection
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockCollection
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockCollection,
    > for Collection
{
    fn into_into_dart(
        self,
    ) -> Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockCollection
    {
        Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockCollection(self)
    }
}
pub struct Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPathBuf(
    PathBuf,
);
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPathBuf
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPathBuf
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPathBuf,
    > for PathBuf
{
    fn into_into_dart(
        self,
    ) -> Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPathBuf {
        Local_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPathBuf(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::backend_exclusive::storage::account_storage::AccountStorageKey
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Accounts => 0.into_dart(),
            Self::MainAccount => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::backend_exclusive::storage::account_storage::AccountStorageKey
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::backend_exclusive::storage::account_storage::AccountStorageKey,
    > for crate::api::backend_exclusive::storage::account_storage::AccountStorageKey
{
    fn into_into_dart(
        self,
    ) -> crate::api::backend_exclusive::storage::account_storage::AccountStorageKey {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::backend_exclusive::storage::account_storage::AccountStorageValue
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::backend_exclusive::storage::account_storage::AccountStorageValue::Accounts(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::backend_exclusive::storage::account_storage::AccountStorageValue::MainAccount(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::backend_exclusive::storage::account_storage::AccountStorageValue
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::backend_exclusive::storage::account_storage::AccountStorageValue,
    > for crate::api::backend_exclusive::storage::account_storage::AccountStorageValue
{
    fn into_into_dart(
        self,
    ) -> crate::api::backend_exclusive::storage::account_storage::AccountStorageValue {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::shared_resources::authentication::account::AccountToken
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.token.into_into_dart().into_dart(),
            self.expires_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::authentication::account::AccountToken
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::shared_resources::authentication::account::AccountToken,
    > for crate::api::shared_resources::authentication::account::AccountToken
{
    fn into_into_dart(self) -> crate::api::shared_resources::authentication::account::AccountToken {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::shared_resources::collection::AdvancedOptions {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.jvm_max_memory.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::collection::AdvancedOptions
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::shared_resources::collection::AdvancedOptions>
    for crate::api::shared_resources::collection::AdvancedOptions
{
    fn into_into_dart(self) -> crate::api::shared_resources::collection::AdvancedOptions {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::shared_resources::collection::CollectionId {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::collection::CollectionId
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::shared_resources::collection::CollectionId>
    for crate::api::shared_resources::collection::CollectionId
{
    fn into_into_dart(self) -> crate::api::shared_resources::collection::CollectionId {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::shared_resources::authentication::msa_flow::LoginFlowDeviceCode
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.verification_uri.into_into_dart().into_dart(),
            self.user_code.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::authentication::msa_flow::LoginFlowDeviceCode
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::shared_resources::authentication::msa_flow::LoginFlowDeviceCode,
    > for crate::api::shared_resources::authentication::msa_flow::LoginFlowDeviceCode
{
    fn into_into_dart(
        self,
    ) -> crate::api::shared_resources::authentication::msa_flow::LoginFlowDeviceCode {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors::XstsError(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors::GameNotOwned => { [1.into_dart()].into_dart() }
crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors::UnknownError(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors,
    > for crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors
{
    fn into_into_dart(
        self,
    ) -> crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::Stage(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::DeviceCode(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::Error(
                field0,
            ) => [2.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::Success(
                field0,
            ) => [3.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent,
    > for crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent
{
    fn into_into_dart(
        self,
    ) -> crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::shared_resources::authentication::msa_flow::LoginFlowStage
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::FetchingDeviceCode => 0.into_dart(),
            Self::WaitingForUser => 1.into_dart(),
            Self::AuthenticatingXboxLive => 2.into_dart(),
            Self::FetchingXstsToken => 3.into_dart(),
            Self::FetchingMinecraftToken => 4.into_dart(),
            Self::GettingProfile => 5.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::authentication::msa_flow::LoginFlowStage
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::shared_resources::authentication::msa_flow::LoginFlowStage,
    > for crate::api::shared_resources::authentication::msa_flow::LoginFlowStage
{
    fn into_into_dart(
        self,
    ) -> crate::api::shared_resources::authentication::msa_flow::LoginFlowStage {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::shared_resources::authentication::account::MinecraftAccount
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.username.into_into_dart().into_dart(),
            self.uuid.into_into_dart().into_dart(),
            self.access_token.into_into_dart().into_dart(),
            self.refresh_token.into_into_dart().into_dart(),
            self.skins.into_into_dart().into_dart(),
            self.capes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::authentication::account::MinecraftAccount
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::shared_resources::authentication::account::MinecraftAccount,
    > for crate::api::shared_resources::authentication::account::MinecraftAccount
{
    fn into_into_dart(
        self,
    ) -> crate::api::shared_resources::authentication::account::MinecraftAccount {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::shared_resources::authentication::account::MinecraftCape
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.state.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
            self.alias.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::authentication::account::MinecraftCape
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::shared_resources::authentication::account::MinecraftCape,
    > for crate::api::shared_resources::authentication::account::MinecraftCape
{
    fn into_into_dart(
        self,
    ) -> crate::api::shared_resources::authentication::account::MinecraftCape {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::shared_resources::authentication::account::MinecraftSkin
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.state.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
            self.variant.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::authentication::account::MinecraftSkin
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::shared_resources::authentication::account::MinecraftSkin,
    > for crate::api::shared_resources::authentication::account::MinecraftSkin
{
    fn into_into_dart(
        self,
    ) -> crate::api::shared_resources::authentication::account::MinecraftSkin {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::shared_resources::authentication::account::MinecraftSkinVariant
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Classic => 0.into_dart(),
            Self::Slim => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::authentication::account::MinecraftSkinVariant
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::shared_resources::authentication::account::MinecraftSkinVariant,
    > for crate::api::shared_resources::authentication::account::MinecraftSkinVariant
{
    fn into_into_dart(
        self,
    ) -> crate::api::shared_resources::authentication::account::MinecraftSkinVariant {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::shared_resources::collection::ModLoader {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.mod_loader_type.into_into_dart().into_dart(),
            self.version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::collection::ModLoader
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::shared_resources::collection::ModLoader>
    for crate::api::shared_resources::collection::ModLoader
{
    fn into_into_dart(self) -> crate::api::shared_resources::collection::ModLoader {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::shared_resources::collection::ModLoaderType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Forge => 0.into_dart(),
            Self::NeoForge => 1.into_dart(),
            Self::Fabric => 2.into_dart(),
            Self::Quilt => 3.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::collection::ModLoaderType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::shared_resources::collection::ModLoaderType>
    for crate::api::shared_resources::collection::ModLoaderType
{
    fn into_into_dart(self) -> crate::api::shared_resources::collection::ModLoaderType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::backend_exclusive::storage::storage_loader::StorageLoader
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.file_name.into_into_dart().into_dart(),
            self.base_path.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::backend_exclusive::storage::storage_loader::StorageLoader
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::backend_exclusive::storage::storage_loader::StorageLoader,
    > for crate::api::backend_exclusive::storage::storage_loader::StorageLoader
{
    fn into_into_dart(
        self,
    ) -> crate::api::backend_exclusive::storage::storage_loader::StorageLoader {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::backend_exclusive::storage::ui_layout::UILayoutKey
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::CompletedSetup => 0.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::backend_exclusive::storage::ui_layout::UILayoutKey
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::backend_exclusive::storage::ui_layout::UILayoutKey,
    > for crate::api::backend_exclusive::storage::ui_layout::UILayoutKey
{
    fn into_into_dart(self) -> crate::api::backend_exclusive::storage::ui_layout::UILayoutKey {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::backend_exclusive::storage::ui_layout::UILayoutValue
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::backend_exclusive::storage::ui_layout::UILayoutValue::CompletedSetup(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::backend_exclusive::storage::ui_layout::UILayoutValue
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::backend_exclusive::storage::ui_layout::UILayoutValue,
    > for crate::api::backend_exclusive::storage::ui_layout::UILayoutValue
{
    fn into_into_dart(self) -> crate::api::backend_exclusive::storage::ui_layout::UILayoutValue {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::backend_exclusive::vanilla::version::VersionMetadata
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.version_type.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
            self.uploaded_time.into_into_dart().into_dart(),
            self.release_time.into_into_dart().into_dart(),
            self.sha1.into_into_dart().into_dart(),
            self.compliance_level.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::backend_exclusive::vanilla::version::VersionMetadata
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::backend_exclusive::vanilla::version::VersionMetadata,
    > for crate::api::backend_exclusive::vanilla::version::VersionMetadata
{
    fn into_into_dart(self) -> crate::api::backend_exclusive::vanilla::version::VersionMetadata {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::backend_exclusive::vanilla::version::VersionType
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Release => 0.into_dart(),
            Self::Snapshot => 1.into_dart(),
            Self::OldBeta => 2.into_dart(),
            Self::OldAlpha => 3.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::backend_exclusive::vanilla::version::VersionType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::backend_exclusive::vanilla::version::VersionType>
    for crate::api::backend_exclusive::vanilla::version::VersionType
{
    fn into_into_dart(self) -> crate::api::backend_exclusive::vanilla::version::VersionType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::DoesNotHaveXboxAccount => 0.into_dart(),
            Self::CountryNotAvailable => 1.into_dart(),
            Self::NeedsAdultVerificationKR1 => 2.into_dart(),
            Self::NeedsAdultVerificationKR2 => 3.into_dart(),
            Self::ChildAccount => 4.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType,
    > for crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType
{
    fn into_into_dart(
        self,
    ) -> crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Collection {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Collection>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for PathBuf {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<PathBuf>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("The type Delegate(Time(Utc)) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Collection>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<PathBuf>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for uuid::Uuid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("The type Delegate(Uuid) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseEncode for crate::api::backend_exclusive::storage::account_storage::AccountStorageKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::backend_exclusive::storage::account_storage::AccountStorageKey::Accounts => { 0 }
crate::api::backend_exclusive::storage::account_storage::AccountStorageKey::MainAccount => { 1 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::backend_exclusive::storage::account_storage::AccountStorageValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::backend_exclusive::storage::account_storage::AccountStorageValue::Accounts(field0) => { <i32>::sse_encode(0, serializer); <Vec<crate::api::shared_resources::authentication::account::MinecraftAccount>>::sse_encode(field0, serializer);
 }
crate::api::backend_exclusive::storage::account_storage::AccountStorageValue::MainAccount(field0) => { <i32>::sse_encode(1, serializer); <Option<uuid::Uuid>>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::shared_resources::authentication::account::AccountToken {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.token, serializer);
        <i64>::sse_encode(self.expires_at, serializer);
    }
}

impl SseEncode for crate::api::shared_resources::collection::AdvancedOptions {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<usize>>::sse_encode(self.jvm_max_memory, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::shared_resources::collection::CollectionId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<crate::api::shared_resources::authentication::account::MinecraftAccount> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::shared_resources::authentication::account::MinecraftAccount>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::shared_resources::authentication::account::MinecraftCape> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::shared_resources::authentication::account::MinecraftCape>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::shared_resources::authentication::account::MinecraftSkin> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::shared_resources::authentication::account::MinecraftSkin>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::backend_exclusive::storage::storage_loader::StorageLoader> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::backend_exclusive::storage::storage_loader::StorageLoader>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::backend_exclusive::vanilla::version::VersionMetadata> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::backend_exclusive::vanilla::version::VersionMetadata>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for crate::api::shared_resources::authentication::msa_flow::LoginFlowDeviceCode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.verification_uri, serializer);
        <String>::sse_encode(self.user_code, serializer);
    }
}

impl SseEncode for crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors::XstsError(field0) => { <i32>::sse_encode(0, serializer); <crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType>::sse_encode(field0, serializer);
 }
crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors::GameNotOwned => { <i32>::sse_encode(1, serializer);  }
crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors::UnknownError(field0) => { <i32>::sse_encode(2, serializer); <String>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::Stage(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::shared_resources::authentication::msa_flow::LoginFlowStage>::sse_encode(field0, serializer);
            }
            crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::DeviceCode(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::shared_resources::authentication::msa_flow::LoginFlowDeviceCode>::sse_encode(field0, serializer);
            }
            crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::Error(
                field0,
            ) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::shared_resources::authentication::msa_flow::LoginFlowErrors>::sse_encode(field0, serializer);
            }
            crate::api::shared_resources::authentication::msa_flow::LoginFlowEvent::Success(
                field0,
            ) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::shared_resources::authentication::account::MinecraftAccount>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::shared_resources::authentication::msa_flow::LoginFlowStage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::FetchingDeviceCode => { 0 }
crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::WaitingForUser => { 1 }
crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::AuthenticatingXboxLive => { 2 }
crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::FetchingXstsToken => { 3 }
crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::FetchingMinecraftToken => { 4 }
crate::api::shared_resources::authentication::msa_flow::LoginFlowStage::GettingProfile => { 5 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::shared_resources::authentication::account::MinecraftAccount {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.username, serializer);
        <uuid::Uuid>::sse_encode(self.uuid, serializer);
        <crate::api::shared_resources::authentication::account::AccountToken>::sse_encode(
            self.access_token,
            serializer,
        );
        <crate::api::shared_resources::authentication::account::AccountToken>::sse_encode(
            self.refresh_token,
            serializer,
        );
        <Vec<crate::api::shared_resources::authentication::account::MinecraftSkin>>::sse_encode(
            self.skins, serializer,
        );
        <Vec<crate::api::shared_resources::authentication::account::MinecraftCape>>::sse_encode(
            self.capes, serializer,
        );
    }
}

impl SseEncode for crate::api::shared_resources::authentication::account::MinecraftCape {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.state, serializer);
        <String>::sse_encode(self.url, serializer);
        <String>::sse_encode(self.alias, serializer);
    }
}

impl SseEncode for crate::api::shared_resources::authentication::account::MinecraftSkin {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.state, serializer);
        <String>::sse_encode(self.url, serializer);
        <crate::api::shared_resources::authentication::account::MinecraftSkinVariant>::sse_encode(
            self.variant,
            serializer,
        );
    }
}

impl SseEncode for crate::api::shared_resources::authentication::account::MinecraftSkinVariant {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::shared_resources::authentication::account::MinecraftSkinVariant::Classic => { 0 }
crate::api::shared_resources::authentication::account::MinecraftSkinVariant::Slim => { 1 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::shared_resources::collection::ModLoader {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::shared_resources::collection::ModLoaderType>::sse_encode(
            self.mod_loader_type,
            serializer,
        );
        <String>::sse_encode(self.version, serializer);
    }
}

impl SseEncode for crate::api::shared_resources::collection::ModLoaderType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::shared_resources::collection::ModLoaderType::Forge => 0,
                crate::api::shared_resources::collection::ModLoaderType::NeoForge => 1,
                crate::api::shared_resources::collection::ModLoaderType::Fabric => 2,
                crate::api::shared_resources::collection::ModLoaderType::Quilt => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<uuid::Uuid> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <uuid::Uuid>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::shared_resources::collection::AdvancedOptions> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::shared_resources::collection::AdvancedOptions>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::shared_resources::collection::ModLoader> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::shared_resources::collection::ModLoader>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::backend_exclusive::storage::storage_loader::StorageLoader {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.file_name, serializer);
        <PathBuf>::sse_encode(self.base_path, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for crate::api::backend_exclusive::storage::ui_layout::UILayoutKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::backend_exclusive::storage::ui_layout::UILayoutKey::CompletedSetup => 0,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::backend_exclusive::storage::ui_layout::UILayoutValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::backend_exclusive::storage::ui_layout::UILayoutValue::CompletedSetup(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <bool>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::api::backend_exclusive::vanilla::version::VersionMetadata {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <crate::api::backend_exclusive::vanilla::version::VersionType>::sse_encode(
            self.version_type,
            serializer,
        );
        <String>::sse_encode(self.url, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.uploaded_time, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.release_time, serializer);
        <String>::sse_encode(self.sha1, serializer);
        <u32>::sse_encode(self.compliance_level, serializer);
    }
}

impl SseEncode for crate::api::backend_exclusive::vanilla::version::VersionType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::backend_exclusive::vanilla::version::VersionType::Release => 0,
                crate::api::backend_exclusive::vanilla::version::VersionType::Snapshot => 1,
                crate::api::backend_exclusive::vanilla::version::VersionType::OldBeta => 2,
                crate::api::backend_exclusive::vanilla::version::VersionType::OldAlpha => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::DoesNotHaveXboxAccount => { 0 }
crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::CountryNotAvailable => { 1 }
crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::NeedsAdultVerificationKR1 => { 2 }
crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::NeedsAdultVerificationKR2 => { 3 }
crate::api::shared_resources::authentication::msa_flow::XstsTokenErrorType::ChildAccount => { 4 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
