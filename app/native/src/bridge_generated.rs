#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.79.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_get_logger_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "setup_logger",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| get_logger(task_callback.stream_sink::<_, LogEntry>()),
    )
}
fn wire_download_vanilla_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "download_vanilla",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| download_vanilla(task_callback.stream_sink::<_, ReturnType>()),
    )
}
fn wire_launch_game_impl(
    port_: MessagePort,
    pre_launch_arguments: impl Wire2Api<PrepareGameArgs> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "launch_game",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pre_launch_arguments = pre_launch_arguments.wire2api();
            move |task_callback| launch_game(api_pre_launch_arguments)
        },
    )
}
fn wire_download_quilt_impl(
    port_: MessagePort,
    quilt_prepare: impl Wire2Api<PrepareGameArgs> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "download_quilt",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_quilt_prepare = quilt_prepare.wire2api();
            move |task_callback| {
                download_quilt(
                    task_callback.stream_sink::<_, ReturnType>(),
                    api_quilt_prepare,
                )
            }
        },
    )
}
fn wire_fetch_state_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, DownloadState>(
        WrapInfo {
            debug_name: "fetch_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(fetch_state()),
    )
}
fn wire_write_state_impl(port_: MessagePort, s: impl Wire2Api<DownloadState> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "write_state",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            move |task_callback| Ok(write_state(api_s))
        },
    )
}
fn wire_get_ui_layout_config_impl(port_: MessagePort, key: impl Wire2Api<Key> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Value>(
        WrapInfo {
            debug_name: "get_ui_layout_config",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_key = key.wire2api();
            move |task_callback| Ok(get_ui_layout_config(api_key))
        },
    )
}
fn wire_set_ui_layout_config_impl(
    port_: MessagePort,
    config: impl Wire2Api<UILayout> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "set_ui_layout_config",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_config = config.wire2api();
            move |task_callback| set_ui_layout_config(api_config)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<DownloadState> for i32 {
    fn wire2api(self) -> DownloadState {
        match self {
            0 => DownloadState::Downloading,
            1 => DownloadState::Paused,
            2 => DownloadState::Stopped,
            _ => unreachable!("Invalid variant for DownloadState: {}", self),
        }
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<Key> for i32 {
    fn wire2api(self) -> Key {
        match self {
            0 => Key::fail,
            1 => Key::completed_setup,
            _ => unreachable!("Invalid variant for Key: {}", self),
        }
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for DownloadState {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Downloading => 0,
            Self::Paused => 1,
            Self::Stopped => 2,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DownloadState {}
impl rust2dart::IntoIntoDart<DownloadState> for DownloadState {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for GameOptions {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.auth_player_name.into_into_dart().into_dart(),
            self.game_version_name.into_into_dart().into_dart(),
            self.game_directory.into_dart(),
            self.assets_root.into_dart(),
            self.assets_index_name.into_into_dart().into_dart(),
            self.auth_uuid.into_into_dart().into_dart(),
            self.user_type.into_into_dart().into_dart(),
            self.version_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for GameOptions {}
impl rust2dart::IntoIntoDart<GameOptions> for GameOptions {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for JvmOptions {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.launcher_name.into_into_dart().into_dart(),
            self.launcher_version.into_into_dart().into_dart(),
            self.classpath.into_into_dart().into_dart(),
            self.classpath_separator.into_into_dart().into_dart(),
            self.primary_jar.into_into_dart().into_dart(),
            self.library_directory.into_dart(),
            self.game_directory.into_dart(),
            self.native_directory.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for JvmOptions {}
impl rust2dart::IntoIntoDart<JvmOptions> for JvmOptions {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for LaunchArgs {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.jvm_args.into_into_dart().into_dart(),
            self.main_class.into_into_dart().into_dart(),
            self.game_args.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LaunchArgs {}
impl rust2dart::IntoIntoDart<LaunchArgs> for LaunchArgs {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for LogEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.level.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
            self.time_millis.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LogEntry {}
impl rust2dart::IntoIntoDart<LogEntry> for LogEntry {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for LogLevel {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Error => 0,
            Self::Warn => 1,
            Self::Info => 2,
            Self::Debug => 3,
            Self::Trace => 4,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LogLevel {}
impl rust2dart::IntoIntoDart<LogLevel> for LogLevel {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PrepareGameArgs {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.launch_args.into_into_dart().into_dart(),
            self.jvm_args.into_into_dart().into_dart(),
            self.game_args.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PrepareGameArgs {}
impl rust2dart::IntoIntoDart<PrepareGameArgs> for PrepareGameArgs {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Progress {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.speed.into_into_dart().into_dart(),
            self.percentages.into_into_dart().into_dart(),
            self.current_size.into_into_dart().into_dart(),
            self.total_size.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Progress {}
impl rust2dart::IntoIntoDart<Progress> for Progress {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for ReturnType {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.progress.into_dart(),
            self.prepare_name_args.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ReturnType {}
impl rust2dart::IntoIntoDart<ReturnType> for ReturnType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Value {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::fail(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::completed_setup(field0) => {
                vec![1.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Value {}
impl rust2dart::IntoIntoDart<Value> for Value {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
