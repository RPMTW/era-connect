#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_setup_logger_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "setup_logger",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| setup_logger(),
    )
}
fn wire_get_ui_layout_storage_impl(
    key: impl Wire2Api<UILayoutKey> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_ui_layout_storage",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_key = key.wire2api();
            Result::<_, ()>::Ok(get_ui_layout_storage(api_key))
        },
    )
}
fn wire_set_ui_layout_storage_impl(
    port_: MessagePort,
    value: impl Wire2Api<UILayoutValue> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "set_ui_layout_storage",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_value = value.wire2api();
            move |task_callback| set_ui_layout_storage(api_value)
        },
    )
}
fn wire_get_account_storage_impl(
    key: impl Wire2Api<AccountStorageKey> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_account_storage",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_key = key.wire2api();
            Result::<_, ()>::Ok(get_account_storage(api_key))
        },
    )
}
fn wire_get_skin_file_path_impl(
    skin: impl Wire2Api<MinecraftSkin> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_skin_file_path",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_skin = skin.wire2api();
            Result::<_, ()>::Ok(get_skin_file_path(api_skin))
        },
    )
}
fn wire_remove_minecraft_account_impl(
    port_: MessagePort,
    uuid: impl Wire2Api<uuid::Uuid> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "remove_minecraft_account",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_uuid = uuid.wire2api();
            move |task_callback| remove_minecraft_account(api_uuid)
        },
    )
}
fn wire_minecraft_login_flow_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "minecraft_login_flow",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                minecraft_login_flow(task_callback.stream_sink::<_, LoginFlowEvent>())
            }
        },
    )
}
fn wire_get_vanilla_versions_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<VersionMetadata>, _>(
        WrapInfo {
            debug_name: "get_vanilla_versions",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_vanilla_versions(),
    )
}
fn wire_get_all_download_progress_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "get_all_download_progress",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(get_all_download_progress(
                    task_callback.stream_sink::<_, Vec<(CollectionId, Progress)>>(),
                ))
            }
        },
    )
}
fn wire_create_collection_impl(
    port_: MessagePort,
    display_name: impl Wire2Api<String> + UnwindSafe,
    version_metadata: impl Wire2Api<VersionMetadata> + UnwindSafe,
    mod_loader: impl Wire2Api<Option<ModLoader>> + UnwindSafe,
    advanced_options: impl Wire2Api<Option<AdvancedOptions>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "create_collection",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_display_name = display_name.wire2api();
            let api_version_metadata = version_metadata.wire2api();
            let api_mod_loader = mod_loader.wire2api();
            let api_advanced_options = advanced_options.wire2api();
            move |task_callback| {
                create_collection(
                    api_display_name,
                    api_version_metadata,
                    api_mod_loader,
                    api_advanced_options,
                )
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
impl Wire2Api<chrono::DateTime<chrono::Utc>> for i64 {
    fn wire2api(self) -> chrono::DateTime<chrono::Utc> {
        let Timestamp { s, ns } = wire2api_timestamp(self);
        chrono::DateTime::<chrono::Utc>::from_utc(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        )
    }
}

impl Wire2Api<AccountStorageKey> for i32 {
    fn wire2api(self) -> AccountStorageKey {
        match self {
            0 => AccountStorageKey::Accounts,
            1 => AccountStorageKey::MainAccount,
            _ => unreachable!("Invalid variant for AccountStorageKey: {}", self),
        }
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<MinecraftSkinVariant> for i32 {
    fn wire2api(self) -> MinecraftSkinVariant {
        match self {
            0 => MinecraftSkinVariant::Classic,
            1 => MinecraftSkinVariant::Slim,
            _ => unreachable!("Invalid variant for MinecraftSkinVariant: {}", self),
        }
    }
}

impl Wire2Api<ModLoaderType> for i32 {
    fn wire2api(self) -> ModLoaderType {
        match self {
            0 => ModLoaderType::Forge,
            1 => ModLoaderType::NeoForge,
            2 => ModLoaderType::Fabric,
            3 => ModLoaderType::Quilt,
            _ => unreachable!("Invalid variant for ModLoaderType: {}", self),
        }
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}
impl Wire2Api<UILayoutKey> for i32 {
    fn wire2api(self) -> UILayoutKey {
        match self {
            0 => UILayoutKey::CompletedSetup,
            _ => unreachable!("Invalid variant for UILayoutKey: {}", self),
        }
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}

impl Wire2Api<VersionType> for i32 {
    fn wire2api(self) -> VersionType {
        match self {
            0 => VersionType::Release,
            1 => VersionType::Snapshot,
            2 => VersionType::OldBeta,
            3 => VersionType::OldAlpha,
            _ => unreachable!("Invalid variant for VersionType: {}", self),
        }
    }
}
// Section: impl IntoDart

impl support::IntoDart for AccountStorageValue {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Accounts(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::MainAccount(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AccountStorageValue {}
impl rust2dart::IntoIntoDart<AccountStorageValue> for AccountStorageValue {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for AccountToken {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.token.into_into_dart().into_dart(),
            self.expires_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AccountToken {}
impl rust2dart::IntoIntoDart<AccountToken> for AccountToken {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for CollectionId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CollectionId {}
impl rust2dart::IntoIntoDart<CollectionId> for CollectionId {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for LoginFlowDeviceCode {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.verification_uri.into_into_dart().into_dart(),
            self.user_code.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LoginFlowDeviceCode {}
impl rust2dart::IntoIntoDart<LoginFlowDeviceCode> for LoginFlowDeviceCode {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for LoginFlowErrors {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::XstsError(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::GameNotOwned => vec![1.into_dart()],
            Self::UnknownError(field0) => vec![2.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LoginFlowErrors {}
impl rust2dart::IntoIntoDart<LoginFlowErrors> for LoginFlowErrors {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for LoginFlowEvent {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Stage(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::DeviceCode(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::Error(field0) => vec![2.into_dart(), field0.into_into_dart().into_dart()],
            Self::Success(field0) => vec![3.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LoginFlowEvent {}
impl rust2dart::IntoIntoDart<LoginFlowEvent> for LoginFlowEvent {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for LoginFlowStage {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::FetchingDeviceCode => 0,
            Self::WaitingForUser => 1,
            Self::AuthenticatingXboxLive => 2,
            Self::FetchingXstsToken => 3,
            Self::FetchingMinecraftToken => 4,
            Self::GettingProfile => 5,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for LoginFlowStage {}
impl rust2dart::IntoIntoDart<LoginFlowStage> for LoginFlowStage {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MinecraftAccount {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.username.into_into_dart().into_dart(),
            self.uuid.into_into_dart().into_dart(),
            self.access_token.into_into_dart().into_dart(),
            self.refresh_token.into_into_dart().into_dart(),
            self.skins.into_into_dart().into_dart(),
            self.capes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MinecraftAccount {}
impl rust2dart::IntoIntoDart<MinecraftAccount> for MinecraftAccount {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MinecraftCape {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.state.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
            self.alias.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MinecraftCape {}
impl rust2dart::IntoIntoDart<MinecraftCape> for MinecraftCape {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MinecraftSkin {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.state.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
            self.variant.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MinecraftSkin {}
impl rust2dart::IntoIntoDart<MinecraftSkin> for MinecraftSkin {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MinecraftSkinVariant {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Classic => 0,
            Self::Slim => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MinecraftSkinVariant {}
impl rust2dart::IntoIntoDart<MinecraftSkinVariant> for MinecraftSkinVariant {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Progress {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.speed.into_into_dart().into_dart(),
            self.percentages.into_into_dart().into_dart(),
            self.current_size.into_into_dart().into_dart(),
            self.total_size.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Progress {}
impl rust2dart::IntoIntoDart<Progress> for Progress {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for UILayoutValue {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::CompletedSetup(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UILayoutValue {}
impl rust2dart::IntoIntoDart<UILayoutValue> for UILayoutValue {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for VersionMetadata {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.version_type.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
            self.uploaded_time.into_into_dart().into_dart(),
            self.release_time.into_into_dart().into_dart(),
            self.sha1.into_into_dart().into_dart(),
            self.compliance_level.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for VersionMetadata {}
impl rust2dart::IntoIntoDart<VersionMetadata> for VersionMetadata {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for VersionType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Release => 0,
            Self::Snapshot => 1,
            Self::OldBeta => 2,
            Self::OldAlpha => 3,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for VersionType {}
impl rust2dart::IntoIntoDart<VersionType> for VersionType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for XstsTokenErrorType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::DoesNotHaveXboxAccount => 0,
            Self::CountryNotAvailable => 1,
            Self::NeedsAdultVerificationKR1 => 2,
            Self::NeedsAdultVerificationKR2 => 3,
            Self::ChildAccount => 4,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for XstsTokenErrorType {}
impl rust2dart::IntoIntoDart<XstsTokenErrorType> for XstsTokenErrorType {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
