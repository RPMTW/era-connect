// Mocks generated by Mockito 5.4.2 from annotations
// in era_connect_i18n/test/i18n_locale_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:isolate' as _i4;
import 'dart:typed_data' as _i3;
import 'dart:ui' as _i2;

import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAccessibilityFeatures_0 extends _i1.SmartFake
    implements _i2.AccessibilityFeatures {
  _FakeAccessibilityFeatures_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocale_1 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFrameData_2 extends _i1.SmartFake implements _i2.FrameData {
  _FakeFrameData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PlatformDispatcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformDispatcher extends _i1.Mock
    implements _i2.PlatformDispatcher {
  MockPlatformDispatcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onPlatformConfigurationChanged(_i2.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onPlatformConfigurationChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Iterable<_i2.Display> get displays => (super.noSuchMethod(
        Invocation.getter(#displays),
        returnValue: <_i2.Display>[],
      ) as Iterable<_i2.Display>);
  @override
  Iterable<_i2.FlutterView> get views => (super.noSuchMethod(
        Invocation.getter(#views),
        returnValue: <_i2.FlutterView>[],
      ) as Iterable<_i2.FlutterView>);
  @override
  set onMetricsChanged(_i2.VoidCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onMetricsChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onBeginFrame(_i2.FrameCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onBeginFrame,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onDrawFrame(_i2.VoidCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onDrawFrame,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onPointerDataPacket(_i2.PointerDataPacketCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onPointerDataPacket,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onKeyData(_i2.KeyDataCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onKeyData,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onReportTimings(_i2.TimingsCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onReportTimings,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onPlatformMessage(_i2.PlatformMessageCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onPlatformMessage,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.AccessibilityFeatures get accessibilityFeatures => (super.noSuchMethod(
        Invocation.getter(#accessibilityFeatures),
        returnValue: _FakeAccessibilityFeatures_0(
          this,
          Invocation.getter(#accessibilityFeatures),
        ),
      ) as _i2.AccessibilityFeatures);
  @override
  set onAccessibilityFeaturesChanged(_i2.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onAccessibilityFeaturesChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Locale get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: _FakeLocale_1(
          this,
          Invocation.getter(#locale),
        ),
      ) as _i2.Locale);
  @override
  List<_i2.Locale> get locales => (super.noSuchMethod(
        Invocation.getter(#locales),
        returnValue: <_i2.Locale>[],
      ) as List<_i2.Locale>);
  @override
  set onLocaleChanged(_i2.VoidCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onLocaleChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get initialLifecycleState => (super.noSuchMethod(
        Invocation.getter(#initialLifecycleState),
        returnValue: '',
      ) as String);
  @override
  bool get alwaysUse24HourFormat => (super.noSuchMethod(
        Invocation.getter(#alwaysUse24HourFormat),
        returnValue: false,
      ) as bool);
  @override
  double get textScaleFactor => (super.noSuchMethod(
        Invocation.getter(#textScaleFactor),
        returnValue: 0.0,
      ) as double);
  @override
  set onTextScaleFactorChanged(_i2.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onTextScaleFactorChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get nativeSpellCheckServiceDefined => (super.noSuchMethod(
        Invocation.getter(#nativeSpellCheckServiceDefined),
        returnValue: false,
      ) as bool);
  @override
  bool get brieflyShowPassword => (super.noSuchMethod(
        Invocation.getter(#brieflyShowPassword),
        returnValue: false,
      ) as bool);
  @override
  _i2.Brightness get platformBrightness => (super.noSuchMethod(
        Invocation.getter(#platformBrightness),
        returnValue: _i2.Brightness.dark,
      ) as _i2.Brightness);
  @override
  set onPlatformBrightnessChanged(_i2.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onPlatformBrightnessChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onSystemFontFamilyChanged(_i2.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSystemFontFamilyChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get semanticsEnabled => (super.noSuchMethod(
        Invocation.getter(#semanticsEnabled),
        returnValue: false,
      ) as bool);
  @override
  set onSemanticsEnabledChanged(_i2.VoidCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSemanticsEnabledChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onSemanticsActionEvent(_i2.SemanticsActionEventCallback? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSemanticsActionEvent,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.FrameData get frameData => (super.noSuchMethod(
        Invocation.getter(#frameData),
        returnValue: _FakeFrameData_2(
          this,
          Invocation.getter(#frameData),
        ),
      ) as _i2.FrameData);
  @override
  set onFrameDataChanged(_i2.VoidCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onFrameDataChanged,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set onError(_i2.ErrorCallback? callback) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          callback,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get defaultRouteName => (super.noSuchMethod(
        Invocation.getter(#defaultRouteName),
        returnValue: '',
      ) as String);
  @override
  _i2.FlutterView? view({required int? id}) =>
      (super.noSuchMethod(Invocation.method(
        #view,
        [],
        {#id: id},
      )) as _i2.FlutterView?);
  @override
  void sendPlatformMessage(
    String? name,
    _i3.ByteData? data,
    _i2.PlatformMessageResponseCallback? callback,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #sendPlatformMessage,
          [
            name,
            data,
            callback,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void sendPortPlatformMessage(
    String? name,
    _i3.ByteData? data,
    int? identifier,
    _i4.SendPort? port,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #sendPortPlatformMessage,
          [
            name,
            data,
            identifier,
            port,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerBackgroundIsolate(_i2.RootIsolateToken? token) =>
      super.noSuchMethod(
        Invocation.method(
          #registerBackgroundIsolate,
          [token],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setIsolateDebugName(String? name) => super.noSuchMethod(
        Invocation.method(
          #setIsolateDebugName,
          [name],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void requestDartPerformanceMode(_i2.DartPerformanceMode? mode) =>
      super.noSuchMethod(
        Invocation.method(
          #requestDartPerformanceMode,
          [mode],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void scheduleFrame() => super.noSuchMethod(
        Invocation.method(
          #scheduleFrame,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void updateSemantics(_i2.SemanticsUpdate? update) => super.noSuchMethod(
        Invocation.method(
          #updateSemantics,
          [update],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Locale? computePlatformResolvedLocale(
          List<_i2.Locale>? supportedLocales) =>
      (super.noSuchMethod(Invocation.method(
        #computePlatformResolvedLocale,
        [supportedLocales],
      )) as _i2.Locale?);
}
